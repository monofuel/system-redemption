image: docker/compose:1.24.0-rc1

# TODO dind caching
variables:
   # When using dind service we need to instruct docker, to talk with the
   # daemon started inside of the service. The daemon is available with
   # a network connection instead of the default /var/run/docker.sock socket.
   #
   # The 'docker' hostname is the alias of the service container as described at
   # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
   #
   # Note that if you're using Kubernetes executor, the variable should be set to
   # tcp://localhost:2375 because of how Kubernetes executor connects services
   # to the job container
   DOCKER_HOST: tcp://localhost:2375/
   # When using dind, it's wise to use the overlayfs driver for
   # improved performance.
   DOCKER_DRIVER: overlay2

 services:
   - docker:dind

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - rts-assets/
    - ShaderParticleEngine
#  - node_modules/

before_script:
  - docker info
  - apk add --no-cache git openssh-client
  - git submodule sync --recursive
  - git submodule update --init --recursive
  - ls rts-assets/
#   - docker run -v `pwd`:/sr node:alpine sh -c 'cd /sr && yarn; chown -R 1001:1001 ./*'

stages:
  - build
  - test
  # - deploy

standalone_build:
  stage: build
  script:
    - docker-compose build

standalone_test:
  stage: test
  script:
    - docker-compose run standalone yarn test

# prod_deploy:
#   stage: deploy
#   script:
#     - docker build -t deployer -f ./Dockerfile-deploy .
#     - docker run -e VAGRANT_LINODE_KEY -e ANSIBLE_ID_RSA -e ANSIBLE_ID_RSA_PUB deployer bash -c 'mkdir -p /vagrant/.vagrant/machines/sr/linode; echo "12037264" > /vagrant/.vagrant/machines/sr/linode/id; echo "$ANSIBLE_ID_RSA" > /vagrant/id_rsa; echo "$ANSIBLE_ID_RSA_PUB" > /vagrant/id_rsa.pub; cd /vagrant && vagrant up --provider=linode && vagrant provision'
